<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-30T15:47:52+03:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">MadTech</title><subtitle>A blog about systems, C, assembly and security learning path</subtitle><author><name>Salvador404</name><email>mad444tech@gmail.com</email></author><entry><title type="html">C behavior(scanf and fgets)</title><link href="http://localhost:4000/2024/06/01/fgetsVSscanf.html" rel="alternate" type="text/html" title="C behavior(scanf and fgets)" /><published>2024-06-01T00:00:00+03:30</published><updated>2024-06-01T00:00:00+03:30</updated><id>http://localhost:4000/2024/06/01/fgetsVSscanf</id><content type="html" xml:base="http://localhost:4000/2024/06/01/fgetsVSscanf.html"><![CDATA[<h1 id="fget-and-scanf-functions-and-their-behavior">fget() and scanf() functions and their behavior<br /></h1>

<p>The <code class="language-plaintext highlighter-rouge">fgets()</code> is a standard version of the <code class="language-plaintext highlighter-rouge">gets()</code> function . <code class="language-plaintext highlighter-rouge">gets()</code>function has long been obsolete
 because it would prepare the system memory to receive any input value without any prediction;
 And this could cause overflow.
 But the <code class="language-plaintext highlighter-rouge">fgets()</code>reduces this possibility by restricting the input.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cp">#define Max 100  
</span>    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">Max</span><span class="p">];</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="n">Max</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">scanf()</code> is also a function for receiving input,
 which stores the value in a variable by specifying the input format
 and passing a pointer to that variable.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">int</span> <span class="n">item</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">item</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>

<p>But using these two functions in succession can be problematic.
 If you place the <code class="language-plaintext highlighter-rouge">fgets()</code> immediately after the <code class="language-plaintext highlighter-rouge">scanf()</code>,</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="s">"Enter a number and a sentence :"</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">Max</span><span class="p">];</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">str</span> <span class="p">,</span> <span class="n">Max</span> <span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>

<p>What happens is that the program waits while running until you enter a number.
 After you enter a number and press Enter,
 the program skips the <code class="language-plaintext highlighter-rouge">fgets()</code> and does not receive a sentence.
 If we look more closely, the program actually doesn’t jump over the <code class="language-plaintext highlighter-rouge">fgets()</code>.
 In fact, when you press Enter, the program gives the entire space 
 after the number to the next line to <code class="language-plaintext highlighter-rouge">fgets()</code> with the same Enter key.
 So in practice, nothing is stored except <code class="language-plaintext highlighter-rouge">SPACE</code> inside str.
 The simple solution to this is like this: ‘\n’</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="s">"Enter a number and a sentence :"</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">Max</span><span class="p">];</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">str</span> <span class="p">,</span> <span class="n">Max</span> <span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>

<p>This will cause the program to wait for the next line to enter a sentence.</p>]]></content><author><name>Salvador404</name><email>mad444tech@gmail.com</email></author><summary type="html"><![CDATA[fget() and scanf() functions and their behavior]]></summary></entry><entry><title type="html">Welcome to My Blog</title><link href="http://localhost:4000/2024/06/01/welcome.html" rel="alternate" type="text/html" title="Welcome to My Blog" /><published>2024-06-01T00:00:00+03:30</published><updated>2024-06-01T00:00:00+03:30</updated><id>http://localhost:4000/2024/06/01/welcome</id><content type="html" xml:base="http://localhost:4000/2024/06/01/welcome.html"><![CDATA[<p>Welcome to my blog !
Here we’re going to read more about
c/cpp , asm , low-level languages
and their behaviour in general.</p>]]></content><author><name>Salvador404</name><email>mad444tech@gmail.com</email></author><summary type="html"><![CDATA[Welcome to my blog ! Here we’re going to read more about c/cpp , asm , low-level languages and their behaviour in general.]]></summary></entry></feed>